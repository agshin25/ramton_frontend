import React, { useState } from 'react';
import { useEffect } from 'react';
import { 
  Search, 
  Filter, 
  Plus, 
  Edit, 
  Trash2, 
  Truck,
  Phone,
  Mail,
  Clock,
  AlertTriangle,
  CheckCircle,
  User,
  MapPin,
  X,
  Eye,
  Package,
  Star,
  TrendingUp,
  ChevronLeft,
  ChevronRight,
  ChevronsLeft,
  ChevronsRight,
  BarChart3
} from 'lucide-react';
import { 
  useGetAdminsQuery, 
  useGetAdminQuery,
  useCreateAdminMutation, 
  useUpdateAdminMutation, 
  useDeleteAdminMutation
} from '../services/adminsApi';
import { useGetZonesQuery } from '../services/zonesApi';
import { useGetCitiesQuery } from '../services/citiesApi';
import { useGetCountriesQuery } from '../services/countriesApi';
import { useGetRolesQuery } from '../services/rolesApi';

const Couriers = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [currentPage, setCurrentPage] = useState(1);
  const [couriersPerPage] = useState(6);
  const [showAddModal, setShowAddModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [showDeleteModal, setShowDeleteModal] = useState(false);
  const [showViewModal, setShowViewModal] = useState(false);
  const [showDeliveryReportModal, setShowDeliveryReportModal] = useState(false);
  const [selectedCourier, setSelectedCourier] = useState(null);

  // Toast notification states (will be used when implementing CRUD operations)
  const [showToast, setShowToast] = useState(false);
  const [toastMessage, setToastMessage] = useState("");
  const [toastType, setToastType] = useState("success");

  // Toast notification function
  const showToastNotification = (message, type = "success") => {
    setToastMessage(message);
    setToastType(type);
    setShowToast(true);
    setTimeout(() => setShowToast(false), 3000);
  };

  // Error message handler
  const getErrorMessage = (error) => {
    if (error?.data?.errors) {
      // Handle validation errors
      const errors = error.data.errors;
      const errorMessages = [];
      
      Object.keys(errors).forEach(key => {
        if (Array.isArray(errors[key])) {
          errorMessages.push(...errors[key]);
        } else {
          errorMessages.push(errors[key]);
        }
      });
      
      return errorMessages.join(', ');
    }
    
    return error?.data?.message || 'Xəta baş verdi!';
  };

  // API hooks
  const { data: adminsData, isLoading: adminsLoading, error: adminsError } = useGetAdminsQuery();
  const { data: zonesData } = useGetZonesQuery();
  const { data: citiesData } = useGetCitiesQuery();
  const { data: countriesData } = useGetCountriesQuery();
  const { data: rolesData } = useGetRolesQuery();
  const [createAdmin, { isLoading: createLoading }] = useCreateAdminMutation();
  const [updateAdmin, { isLoading: updateLoading }] = useUpdateAdminMutation();
  const [deleteAdmin, { isLoading: deleteLoading }] = useDeleteAdminMutation();

  // Filter couriers from admins data (role_type === "courier")
  const couriers = adminsData?.data?.filter(admin => admin.role_type === "courier") || [];
  const zones = zonesData?.data || [];
  const cities = citiesData?.data || [];
  const countries = countriesData?.data || [];
  const roles = rolesData?.data || [];

  // Enum values
  const statusOptions = ['active', 'deactive', 'passiv'];
  const vehicleTypeOptions = ['motorcycle', 'car', 'scooter', 'bicycle']; // From your VehicleType enum
  const experienceOptions = [1, 2, 3, 4, 5]; // Years of experience

  const [newCourier, setNewCourier] = useState({
    first_name: '',
    last_name: '',
    phone: '',
    email: '',
    password: '',
    status: 'active',
    profile_type: 'courier',
    country_id: '',
    city_id: '',
    zone_ids: [],
    role_ids: [],
    all_orders: 0,
    completed_orders: 0,
    profile: {
      vehicle_type: 'car',
      plate_number: '',
      experience: 1,
      avg_delivery_time: 0,
      delays: 0,
      rating: 5
    }
  });

  // Reset form function
  const resetForm = () => {
    setNewCourier({
      first_name: '',
      last_name: '',
    phone: '',
      email: '',
    password: '',
    status: 'active',
    profile_type: 'courier',
    country_id: '',
    city_id: '',
    zone_ids: [],
    role_ids: [],
      all_orders: 0,
      completed_orders: 0,
    profile: {
      vehicle_type: 'car',
      plate_number: '',
      experience: 1,
      avg_delivery_time: 0,
      delays: 0,
      rating: 5
    }
  });
  };

  // Set default country if only one exists
  useEffect(() => {
    if (countries.length === 1 && !newCourier.country_id) {
      setNewCourier(prev => ({ ...prev, country_id: countries[0].id.toString() }));
    }
  }, [countries, newCourier.country_id]);
  
  // Set default courier role
  useEffect(() => {
    const courierRole = roles.find(role => role.name.toLowerCase().includes('courier') || role.name.toLowerCase().includes('kuryer'));
    if (courierRole && !newCourier.role_ids.length) {
      setNewCourier(prev => ({ ...prev, role_ids: [courierRole.id] }));
    }
  }, [roles, newCourier.role_ids]);

  // Handle add courier
  const handleAddCourier = async () => {
    try {
      const courierData = {
        first_name: newCourier.first_name,
        last_name: newCourier.last_name,
        phone: newCourier.phone,
        email: newCourier.email,
        password: newCourier.password,
        status: newCourier.status,
        profile_type: newCourier.profile_type,
        country_id: parseInt(newCourier.country_id),
        city_id: parseInt(newCourier.city_id),
        zone_ids: newCourier.zone_ids,
        role_ids: newCourier.role_ids,
        all_orders: newCourier.all_orders,
        completed_orders: newCourier.completed_orders,
        profile: {
          vehicle_type: newCourier.profile.vehicle_type,
          plate_number: newCourier.profile.plate_number,
          experience: newCourier.profile.experience,
          avg_delivery_time: newCourier.profile.avg_delivery_time,
          delays: newCourier.profile.delays,
          rating: newCourier.profile.rating
        }
      };
      
      await createAdmin(courierData).unwrap();
      showToastNotification('Kuryer uğurla əlavə edildi!', 'success');
      setShowAddModal(false);
      resetForm();
    } catch (error) {
      const errorMessage = getErrorMessage(error);
      showToastNotification(errorMessage, 'error');
      console.error('Error creating courier:', error);
    }
  };

  // Handle edit courier
  const handleEditCourier = async () => {
    try {
      if (!selectedCourier) return;

      // Only send changed fields for update
      const updateData = {};
      if (newCourier.first_name !== selectedCourier.first_name) updateData.first_name = newCourier.first_name;
      if (newCourier.last_name !== selectedCourier.last_name) updateData.last_name = newCourier.last_name;
      if (newCourier.phone !== selectedCourier.phone) updateData.phone = newCourier.phone;
      if (newCourier.email !== selectedCourier.email) updateData.email = newCourier.email;
      if (newCourier.status !== selectedCourier.status) updateData.status = newCourier.status;
      if (newCourier.country_id !== selectedCourier.country_id.toString()) updateData.country_id = parseInt(newCourier.country_id);
      if (newCourier.city_id !== selectedCourier.city_id.toString()) updateData.city_id = parseInt(newCourier.city_id);
      
      // Check zone_ids changes
      const currentZoneIds = selectedCourier.zones?.map(zone => zone.id) || [];
      const newZoneIds = newCourier.zone_ids;
      if (JSON.stringify(currentZoneIds.sort()) !== JSON.stringify(newZoneIds.sort())) {
        updateData.zone_ids = newZoneIds;
      }
      
      // Check role_ids changes
      const currentRoleIds = selectedCourier.roles?.map(role => role.id) || [];
      const newRoleIds = newCourier.role_ids;
      if (JSON.stringify(currentRoleIds.sort()) !== JSON.stringify(newRoleIds.sort())) {
        updateData.role_ids = newRoleIds;
      }
      
      // Check all_orders and completed_orders changes
      if (newCourier.all_orders !== selectedCourier.profile?.all_orders) {
        updateData.all_orders = newCourier.all_orders;
      }
      if (newCourier.completed_orders !== selectedCourier.profile?.completed_orders) {
        updateData.completed_orders = newCourier.completed_orders;
      }
      
      // Check profile changes
      const profileChanges = {};
      if (newCourier.profile.vehicle_type !== selectedCourier.profile?.vehicle_type) {
        profileChanges.vehicle_type = newCourier.profile.vehicle_type;
      }
      if (newCourier.profile.plate_number !== selectedCourier.profile?.plate_number) {
        profileChanges.plate_number = newCourier.profile.plate_number;
      }
      if (newCourier.profile.experience !== selectedCourier.profile?.experience) {
        profileChanges.experience = newCourier.profile.experience;
      }
      if (newCourier.profile.avg_delivery_time !== selectedCourier.profile?.avg_delivery_time) {
        profileChanges.avg_delivery_time = newCourier.profile.avg_delivery_time;
      }
      if (newCourier.profile.delays !== selectedCourier.profile?.delays) {
        profileChanges.delays = newCourier.profile.delays;
      }
      if (newCourier.profile.rating !== selectedCourier.profile?.rating) {
        profileChanges.rating = newCourier.profile.rating;
      }
      
      if (Object.keys(profileChanges).length > 0) {
        updateData.profile = profileChanges;
      }

      if (Object.keys(updateData).length > 0) {
        await updateAdmin({ id: selectedCourier.id, ...updateData }).unwrap();
        showToastNotification('Kuryer uğurla yeniləndi!', 'success');
        setShowEditModal(false);
        setSelectedCourier(null);
        resetForm();
      } else {
        showToastNotification('Heç bir dəyişiklik edilməyib!', 'error');
      }
    } catch (error) {
      const errorMessage = getErrorMessage(error);
      showToastNotification(errorMessage, 'error');
      console.error('Error updating courier:', error);
    }
  };

  // Handle delete courier
  const handleDeleteCourier = async () => {
    if (selectedCourier) {
      try {
        await deleteAdmin(selectedCourier.id).unwrap();
        showToastNotification('Kuryer uğurla silindi!', 'success');
        setShowDeleteModal(false);
        setSelectedCourier(null);
      } catch (error) {
        const errorMessage = getErrorMessage(error);
        showToastNotification(errorMessage, 'error');
        console.error('Error deleting courier:', error);
      }
    }
  };



  const getStatusColor = (status) => {
    switch (status) {
      case 'active': return 'bg-green-100 text-green-800';
      case 'deactive': return 'bg-red-100 text-red-800';
      case 'passiv': return 'bg-yellow-100 text-yellow-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case 'active': return 'Aktiv';
      case 'deactive': return 'Deaktiv';
      case 'passiv': return 'Passiv';
      default: return status;
    }
  };

  const getRatingColor = (rating) => {
    if (rating >= 4.5) return 'text-green-600';
    if (rating >= 4.0) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getDelayColor = (delayedOrders) => {
    if (delayedOrders === 0) return 'text-green-600';
    if (delayedOrders <= 2) return 'text-yellow-600';
    return 'text-red-600';
  };

  const filteredCouriers = couriers.filter(courier => {
    const fullName = `${courier.first_name} ${courier.last_name}`.toLowerCase();
    const matchesSearch = fullName.includes(searchTerm.toLowerCase()) ||
                         courier.phone.includes(searchTerm) ||
                         courier.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         courier.city?.name?.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === 'all' || courier.status === statusFilter;
    
    return matchesSearch && matchesStatus;
  });

  // Pagination
  const indexOfLastCourier = currentPage * couriersPerPage;
  const indexOfFirstCourier = indexOfLastCourier - couriersPerPage;
  const currentCouriers = filteredCouriers.slice(indexOfFirstCourier, indexOfLastCourier);
  const totalPages = Math.ceil(filteredCouriers.length / couriersPerPage);

  // Pagination functions
  const goToPage = (pageNumber) => setCurrentPage(pageNumber);
  const goToNextPage = () => currentPage < totalPages && setCurrentPage(currentPage + 1);
  const goToPreviousPage = () => currentPage > 1 && setCurrentPage(currentPage - 1);
  const goToFirstPage = () => setCurrentPage(1);
  const goToLastPage = () => setCurrentPage(totalPages);

  const getPageNumbers = () => {
    const pageNumbers = [];
    const maxVisiblePages = 5;
    
    if (totalPages <= maxVisiblePages) {
      for (let i = 1; i <= totalPages; i++) {
        pageNumbers.push(i);
      }
    } else {
      if (currentPage <= 3) {
        for (let i = 1; i <= 4; i++) {
          pageNumbers.push(i);
        }
        pageNumbers.push('...');
        pageNumbers.push(totalPages);
      } else if (currentPage >= totalPages - 2) {
        pageNumbers.push(1);
        pageNumbers.push('...');
        for (let i = totalPages - 3; i <= totalPages; i++) {
          pageNumbers.push(i);
        }
      } else {
        pageNumbers.push(1);
        pageNumbers.push('...');
        for (let i = currentPage - 1; i <= currentPage + 1; i++) {
          pageNumbers.push(i);
        }
        pageNumbers.push('...');
        pageNumbers.push(totalPages);
      }
    }
    
    return pageNumbers;
  };


  const openEditModal = (courier) => {
    setSelectedCourier(courier);
    setNewCourier({
      first_name: courier.first_name || '',
      last_name: courier.last_name || '',
      phone: courier.phone || '',
      email: courier.email || '',
      password: '', // Don't populate password for security
      status: courier.status || 'active',
      profile_type: 'courier',
      country_id: courier.country_id?.toString() || '',
      city_id: courier.city_id?.toString() || '',
      zone_ids: courier.zones?.map(zone => zone.id) || [],
      role_ids: courier.roles?.map(role => role.id) || [],
      all_orders: courier.profile?.all_orders || 0,
      completed_orders: courier.profile?.completed_orders || 0,
      profile: {
        vehicle_type: courier.profile?.vehicle_type || 'car',
        plate_number: courier.profile?.plate_number || '',
        experience: courier.profile?.experience || 1,
        avg_delivery_time: courier.profile?.avg_delivery_time || 0,
        delays: courier.profile?.delays || 0,
        rating: courier.profile?.rating || 5
      }
    });
    setShowEditModal(true);
  };

  const openDeleteModal = (courier) => {
    setSelectedCourier(courier);
    setShowDeleteModal(true);
  };

  const openAddModal = () => {
    resetForm();
    setShowAddModal(true);
  };

  const openViewModal = (courier) => {
    setSelectedCourier(courier);
    setShowViewModal(true);
  };

  const openDeliveryReportModal = (courier) => {
    setSelectedCourier(courier);
    setShowDeliveryReportModal(true);
  };

  const getOrderStatusColor = (status) => {
    switch (status) {
      case 'Tamamlandı': return 'bg-green-100 text-green-800';
      case 'Yönləndirilib': return 'bg-blue-100 text-blue-800';
      case 'Gözləmədə': return 'bg-yellow-100 text-yellow-800';
      case 'Ləğv': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  // Zone helper functions
  const getZoneName = (zoneId) => {
    const zone = zones.find(z => z.id === zoneId);
    return zone ? zone.name : 'Naməlum Zona';
  };


  const getZoneById = (zoneId) => {
    return zones.find(z => z.id === zoneId);
  };

  const getAssignedZonesForCourier = (courier) => {
    return courier.zones || [];
  };

  // Helper function to handle city change and filter zones
  const handleCityChange = (selectedCityName, currentAssignedZones) => {
    const zonesForNewCity = zones.filter(zone => zone.city?.name === selectedCityName);
    const validZoneIds = zonesForNewCity.map(zone => zone.id);
    const filteredAssignedZones = currentAssignedZones.filter(zoneId => 
      validZoneIds.includes(zoneId)
    );
    
    return {
      city: selectedCityName,
      zone_ids: filteredAssignedZones
    };
  };

  // Delivery report helper functions
  const getDeliveryReportData = (courier) => {
    // Use the profile data for basic statistics
    const totalOrders = courier.profile?.all_orders || 0;
    const completedOrders = courier.profile?.completed_orders || 0;
    const activeOrders = 0; // Not available in current API
    const pendingOrders = 0; // Not available in current API
    const cancelledOrders = 0; // Not available in current API
    const averageDeliveryTime = courier.profile?.avg_delivery_time || 0;
    const successRate = totalOrders > 0 ? ((completedOrders / totalOrders) * 100).toFixed(1) : 0;
    
    return {
      totalOrders,
      completedOrders,
      activeOrders,
      pendingOrders,
      cancelledOrders,
      averageDeliveryTime,
      successRate,
      recentOrders: [], // No orders data available
      zoneStats: {} // No zone stats available
    };
  };

  const getDeliveryTimeColor = (time) => {
    const hours = parseFloat(time);
    if (hours <= 2) return 'text-green-600';
    if (hours <= 3) return 'text-blue-600';
    if (hours <= 4) return 'text-yellow-600';
    return 'text-red-600';
  };

  if (adminsLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Kuryerlər yüklənir...</p>
        </div>
      </div>
    );
  }

  if (adminsError) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <AlertTriangle className="w-16 h-16 text-red-500 mx-auto mb-4" />
          <p className="text-red-600">Kuryerlər yüklənərkən xəta baş verdi!</p>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6 bg-gradient-to-br from-gray-50 via-blue-50 to-purple-50 min-h-screen">
      <div className="mb-8">
        <h1 className="text-3xl font-bold text-gray-800 mb-2 bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
          Kuryerlər
        </h1>
        <p className="text-gray-600 text-lg">Çatdırılma xidməti və kuryer idarəetməsi</p>
      </div>
      
      <div className="bg-white rounded-2xl shadow-xl border border-gray-100">
        <div className="p-6 border-b border-gray-200">
          <div className="flex flex-col lg:flex-row lg:items-center justify-between space-y-4 lg:space-y-0">
            <h2 className="text-xl font-semibold text-gray-800">Kuryer Siyahısı</h2>
            <div className="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3">
              <button 
                onClick={openAddModal}
                className="bg-gradient-to-r from-blue-500 to-purple-600 text-white px-6 py-3 rounded-xl hover:shadow-lg transition-all duration-300 transform hover:scale-105 flex items-center justify-center"
              >
                <Plus className="w-4 h-4 mr-2" />
                Yeni Kuryer
              </button>
              <button className="bg-gradient-to-r from-green-500 to-green-600 text-white px-6 py-3 rounded-xl hover:shadow-lg transition-all duration-300 transform hover:scale-105 flex items-center justify-center">
                <Truck className="w-4 h-4 mr-2" />
                Çatdırılma Hesabatı
              </button>
            </div>
          </div>
        </div>

        {/* Axtarış və Filtrlər */}
        <div className="p-6 border-b border-gray-200 bg-gray-50">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
              <input
                type="text"
                placeholder="Kuryer axtar..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="all">Bütün Statuslar</option>
              <option value="active">Aktiv</option>
              <option value="deactive">Deaktiv</option>
              <option value="passiv">Passiv</option>
            </select>
            
            <button className="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors flex items-center justify-center">
              <Filter className="w-4 h-4 mr-2" />
              Filtr
            </button>
          </div>
        </div>
        
        <div className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {currentCouriers.map((courier) => (
              <div key={courier.id} className="border border-gray-200 rounded-2xl p-6 hover:shadow-lg transition-all duration-300 transform hover:scale-105">
                <div className="flex items-center justify-between mb-4">
                  <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                    <span className="text-white font-semibold">{courier.first_name?.charAt(0) || '?'}</span>
                  </div>
                  <span className={`px-3 py-1 rounded-full text-sm font-medium ${getStatusColor(courier.status)}`}>
                    {getStatusText(courier.status)}
                  </span>
                </div>
                
                <h3 className="font-semibold text-gray-800 text-lg mb-2">{courier.first_name} {courier.last_name}</h3>
                
                <div className="space-y-3 mb-4">
                  <div className="flex items-center space-x-2">
                    <Phone className="w-4 h-4 text-gray-500" />
                    <span className="text-sm text-gray-600">{courier.phone}</span>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <Mail className="w-4 h-4 text-gray-500" />
                    <span className="text-sm text-gray-600">{courier.email}</span>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <MapPin className="w-4 h-4 text-gray-500" />
                    <span className="text-sm text-gray-600">{courier.city?.name || 'Naməlum'}</span>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <MapPin className="w-4 h-4 text-blue-500" />
                    <span className="text-sm text-blue-600 font-medium">
                      Zonalar: {courier.zones?.map(zone => zone.name).join(', ') || 'Təyin edilməyib'}
                    </span>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <Truck className="w-4 h-4 text-gray-500" />
                    <span className="text-sm text-gray-600">{courier.courier_orders?.length || 0} sifariş</span>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <CheckCircle className="w-4 h-4 text-green-500" />
                    <span className="text-sm text-green-600">{courier.courier_orders?.filter(order => order.status === 'completed').length || 0} tamamlandı</span>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <AlertTriangle className="w-4 h-4 text-red-500" />
                    <span className={`text-sm font-medium ${getDelayColor(courier.profile?.delays || 0)}`}>
                      {courier.profile?.delays || 0} gecikmə
                    </span>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <Clock className="w-4 h-4 text-gray-500" />
                    <span className="text-sm text-gray-600">Orta vaxt: {courier.profile?.avg_delivery_time || 0} saat</span>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <User className="w-4 h-4 text-gray-500" />
                    <span className={`text-sm font-medium ${getRatingColor(courier.profile?.rating || 0)}`}>
                      Reyting: {courier.profile?.rating || 0}/5
                    </span>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <Truck className="w-4 h-4 text-gray-500" />
                    <span className="text-sm text-gray-600">Nəqliyyat: {courier.profile?.vehicle_type || 'Naməlum'}</span>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <Package className="w-4 h-4 text-gray-500" />
                    <span className="text-sm text-gray-600">Nömrə: {courier.profile?.plate_number || 'Təyin edilməyib'}</span>
                  </div>
                </div>
                
                <div className="flex space-x-2">
                  <button 
                    onClick={() => openViewModal(courier)}
                    className="text-blue-600 hover:text-blue-800 text-sm font-medium flex items-center"
                  >
                    <Eye className="w-4 h-4 mr-1" />
                    Bax
                  </button>
                  <button 
                    onClick={() => openEditModal(courier)}
                    className="text-green-600 hover:text-green-800 text-sm font-medium flex items-center"
                  >
                    <Edit className="w-4 h-4 mr-1" />
                    Redaktə
                  </button>
                  <button 
                    onClick={() => openDeliveryReportModal(courier)}
                    className="text-purple-600 hover:text-purple-800 text-sm font-medium flex items-center"
                  >
                    <BarChart3 className="w-4 h-4 mr-1" />
                    Hesabat
                  </button>
                  <button 
                    onClick={() => openDeleteModal(courier)}
                    className="text-red-600 hover:text-red-800 text-sm font-medium flex items-center"
                  >
                    <Trash2 className="w-4 h-4 mr-1" />
                    Sil
                  </button>
                </div>
              </div>
            ))}
          </div>
          
          {/* Kuryer Statistikası */}
          <div className="mt-8 p-6 bg-gray-50 rounded-xl">
            <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
              <Truck className="w-5 h-5 mr-2 text-blue-600" />
              Kuryer Performans Statistikası
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div className="bg-white p-4 rounded-lg border border-gray-200">
                <p className="text-sm text-gray-600">Aktiv Kuryerlər</p>
                <p className="text-lg font-semibold text-green-600">{couriers.filter(c => c.status === 'active').length}</p>
                <p className="text-xs text-gray-500">Ümumi: {couriers.length}</p>
              </div>
              <div className="bg-white p-4 rounded-lg border border-gray-200">
                <p className="text-sm text-gray-600">Tamamlanmış Sifarişlər</p>
                <p className="text-lg font-semibold text-blue-600">
                  {couriers.reduce((sum, c) => sum + (c.courier_orders?.filter(order => order.status === 'completed').length || 0), 0)}
                </p>
                <p className="text-xs text-gray-500">Ümumi sifarişlər</p>
              </div>
              <div className="bg-white p-4 rounded-lg border border-gray-200">
                <p className="text-sm text-gray-600">Orta Çatdırılma Vaxtı</p>
                <p className="text-lg font-semibold text-purple-600">
                  {couriers.length > 0 ? 
                    (couriers.reduce((sum, c) => sum + parseFloat(c.profile?.avg_delivery_time || 0), 0) / couriers.length).toFixed(1) + ' saat' 
                    : '0 saat'
                  }
                </p>
                <p className="text-xs text-gray-500">Orta vaxt</p>
              </div>
              <div className="bg-white p-4 rounded-lg border border-gray-200">
                <p className="text-sm text-gray-600">Gecikmə Sayı</p>
                <p className="text-lg font-semibold text-red-600">{couriers.reduce((sum, c) => sum + (c.profile?.delays || 0), 0)}</p>
                <p className="text-xs text-gray-500">Ümumi gecikmə</p>
              </div>
            </div>
          </div>
          
          {/* Pagination */}
          {totalPages > 1 && (
            <div className="px-6 py-4 border-t border-gray-200">
              <div className="flex flex-col sm:flex-row items-center justify-between space-y-4 sm:space-y-0">
                <div className="text-sm text-gray-600">
                  Göstərilir: <span className="font-medium">{indexOfFirstCourier + 1}</span> - <span className="font-medium">{Math.min(indexOfLastCourier, filteredCouriers.length)}</span> / <span className="font-medium">{filteredCouriers.length}</span> kuryer
                </div>
                
                <div className="flex items-center space-x-2">
                  <button
                    onClick={goToFirstPage}
                    disabled={currentPage === 1}
                    className="p-2 rounded-lg border border-gray-300 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                    title="İlk səhifə"
                  >
                    <ChevronsLeft className="w-4 h-4 text-gray-600" />
                  </button>
                  
                  <button
                    onClick={goToPreviousPage}
                    disabled={currentPage === 1}
                    className="p-2 rounded-lg border border-gray-300 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                    title="Əvvəlki səhifə"
                  >
                    <ChevronLeft className="w-4 h-4 text-gray-600" />
                  </button>
                  
                  <div className="flex items-center space-x-1">
                    {getPageNumbers().map((pageNumber, index) => (
                      <button
                        key={index}
                        onClick={() => typeof pageNumber === 'number' && goToPage(pageNumber)}
                        disabled={pageNumber === '...'}
                        className={`px-3 py-2 rounded-lg text-sm font-medium transition-colors ${
                          pageNumber === currentPage
                            ? 'bg-blue-600 text-white'
                            : pageNumber === '...'
                            ? 'text-gray-400 cursor-default'
                            : 'text-gray-600 hover:bg-gray-100 border border-gray-300'
                        }`}
                      >
                        {pageNumber}
                      </button>
                    ))}
                  </div>
                  
                  <button
                    onClick={goToNextPage}
                    disabled={currentPage === totalPages}
                    className="p-2 rounded-lg border border-gray-300 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                    title="Növbəti səhifə"
                  >
                    <ChevronRight className="w-4 h-4 text-gray-600" />
                  </button>
                  
                  <button
                    onClick={goToLastPage}
                    disabled={currentPage === totalPages}
                    className="p-2 rounded-lg border border-gray-300 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                    title="Son səhifə"
                  >
                    <ChevronsRight className="w-4 h-4 text-gray-600" />
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Add Courier Modal */}
      {showAddModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-2xl w-full max-w-md max-h-[90vh] flex flex-col">
            <div className="flex items-center justify-between p-6 border-b border-gray-200">
              <h3 className="text-xl font-semibold text-gray-800">Yeni Kuryer Əlavə Et</h3>
              <button 
                onClick={() => setShowAddModal(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <X className="w-6 h-6" />
              </button>
            </div>
            
            <div className="flex-1 overflow-y-auto p-6">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Ad</label>
                  <input
                    type="text"
                    value={newCourier.first_name}
                    onChange={(e) => setNewCourier({...newCourier, first_name: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Adı daxil edin"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Soyad</label>
                  <input
                    type="text"
                    value={newCourier.last_name}
                    onChange={(e) => setNewCourier({...newCourier, last_name: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Soyadı daxil edin"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Telefon</label>
                  <input
                    type="tel"
                    value={newCourier.phone}
                    onChange={(e) => setNewCourier({...newCourier, phone: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="+994 50 123 45 67"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Email</label>
                  <input
                    type="email"
                    value={newCourier.email}
                    onChange={(e) => setNewCourier({...newCourier, email: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="kuryer@example.com"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Şifrə</label>
                  <input
                    type="password"
                    value={newCourier.password}
                    onChange={(e) => setNewCourier({...newCourier, password: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Şifrə daxil edin"
                  />
                </div>
                
                {countries.length > 1 && (
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-2">Ölkə</label>
                    <select
                      value={newCourier.country_id}
                      onChange={(e) => {
                        setNewCourier({...newCourier, country_id: e.target.value, city_id: '', zone_ids: []});
                      }}
                      className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    >
                      <option value="">Ölkə seçin</option>
                      {countries.map((country) => (
                        <option key={country.id} value={country.id}>
                          {country.name}
                        </option>
                      ))}
                    </select>
                  </div>
                )}
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Şəhər</label>
                  <select
                    value={newCourier.city_id}
                    onChange={(e) => {
                      const selectedCityId = e.target.value;
                      const selectedCity = cities.find(city => city.id.toString() === selectedCityId);
                      const cityChange = handleCityChange(selectedCity?.name, newCourier.zone_ids);
                      setNewCourier({...newCourier, city_id: selectedCityId, ...cityChange});
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="">Şəhər seçin</option>
                    {cities.map((city) => (
                      <option key={city.id} value={city.id}>
                        {city.name}
                      </option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Nəqliyyat Növü</label>
                  <select
                    value={newCourier.profile.vehicle_type}
                    onChange={(e) => setNewCourier({...newCourier, profile: {...newCourier.profile, vehicle_type: e.target.value}})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    {vehicleTypeOptions.map((type) => (
                      <option key={type} value={type}>
                        {type === 'motorcycle' ? 'Motosiklet' :
                         type === 'car' ? 'Avtomobil' :
                         type === 'scooter' ? 'Skuter' :
                         type === 'bicycle' ? 'Velosiped' : type}
                      </option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Nəqliyyat Nömrəsi</label>
                  <input
                    type="text"
                    value={newCourier.profile.plate_number}
                    onChange={(e) => setNewCourier({...newCourier, profile: {...newCourier.profile, plate_number: e.target.value}})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="10-AA-123"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Təcrübə (il)</label>
                  <select
                    value={newCourier.profile.experience}
                    onChange={(e) => setNewCourier({...newCourier, profile: {...newCourier.profile, experience: parseInt(e.target.value)}})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    {experienceOptions.map((year) => (
                      <option key={year} value={year}>
                        {year} il
                      </option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Status</label>
                  <select
                    value={newCourier.status}
                    onChange={(e) => setNewCourier({...newCourier, status: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="active">Aktiv</option>
                    <option value="deactive">Deaktiv</option>
                    <option value="passiv">Passiv</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Təyin Edilmiş Zonalar</label>
                  <div className="max-h-32 overflow-y-auto border border-gray-300 rounded-lg p-2">
                    {newCourier.city_id ? (
                      zones.filter(zone => zone.city_id?.toString() === newCourier.city_id).map((zone) => (
                        <label key={zone.id} className="flex items-center space-x-2 py-1">
                          <input
                            type="checkbox"
                            checked={newCourier.zone_ids.includes(zone.id)}
                            onChange={(e) => {
                              if (e.target.checked) {
                                setNewCourier({
                                  ...newCourier,
                                  zone_ids: [...newCourier.zone_ids, zone.id]
                                });
                              } else {
                                setNewCourier({
                                  ...newCourier,
                                  zone_ids: newCourier.zone_ids.filter(id => id !== zone.id)
                                });
                              }
                            }}
                            className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                          />
                          <span className="text-sm text-gray-700">
                            {zone.name} ({zone.district}) - {zone.deliveryTime}
                          </span>
                        </label>
                      ))
                    ) : (
                      <div className="text-sm text-gray-500 py-2 text-center">
                        Zona seçmək üçün əvvəlcə şəhər seçin
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
            
            <div className="flex space-x-3 p-6 border-t border-gray-200">
              <button
                onClick={() => setShowAddModal(false)}
                className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Ləğv Et
              </button>
              <button
                onClick={handleAddCourier}
                disabled={!newCourier.first_name || !newCourier.last_name || !newCourier.phone || !newCourier.email || !newCourier.password || !newCourier.city_id}
                className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Əlavə Et
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Edit Courier Modal */}
      {showEditModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-2xl w-full max-w-md max-h-[90vh] flex flex-col">
            <div className="flex items-center justify-between p-6 border-b border-gray-200">
              <h3 className="text-xl font-semibold text-gray-800">Kuryeri Redaktə Et</h3>
              <button 
                onClick={() => setShowEditModal(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <X className="w-6 h-6" />
              </button>
            </div>
            
            <div className="flex-1 overflow-y-auto p-6">
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Ad</label>
                  <input
                    type="text"
                    value={newCourier.first_name}
                    onChange={(e) => setNewCourier({...newCourier, first_name: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Adı daxil edin"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Soyad</label>
                  <input
                    type="text"
                    value={newCourier.last_name}
                    onChange={(e) => setNewCourier({...newCourier, last_name: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="Soyadı daxil edin"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Telefon</label>
                  <input
                    type="tel"
                    value={newCourier.phone}
                    onChange={(e) => setNewCourier({...newCourier, phone: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="+994 50 123 45 67"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Email</label>
                  <input
                    type="email"
                    value={newCourier.email}
                    onChange={(e) => setNewCourier({...newCourier, email: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="kuryer@example.com"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Şəhər</label>
                  <select
                    value={newCourier.city_id}
                    onChange={(e) => {
                      const selectedCityId = e.target.value;
                      const selectedCity = cities.find(city => city.id.toString() === selectedCityId);
                      const cityChange = handleCityChange(selectedCity?.name, newCourier.zone_ids);
                      setNewCourier({...newCourier, city_id: selectedCityId, ...cityChange});
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="">Şəhər seçin</option>
                    {cities.map((city) => (
                      <option key={city.id} value={city.id}>
                        {city.name}
                      </option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Nəqliyyat Növü</label>
                  <select
                    value={newCourier.profile.vehicle_type}
                    onChange={(e) => setNewCourier({...newCourier, profile: {...newCourier.profile, vehicle_type: e.target.value}})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    {vehicleTypeOptions.map((type) => (
                      <option key={type} value={type}>
                        {type === 'motorcycle' ? 'Motosiklet' :
                         type === 'car' ? 'Avtomobil' :
                         type === 'scooter' ? 'Skuter' :
                         type === 'bicycle' ? 'Velosiped' : type}
                      </option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Nəqliyyat Nömrəsi</label>
                  <input
                    type="text"
                    value={newCourier.profile.plate_number}
                    onChange={(e) => setNewCourier({...newCourier, profile: {...newCourier.profile, plate_number: e.target.value}})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    placeholder="10-AA-123"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Təcrübə (il)</label>
                  <select
                    value={newCourier.profile.experience}
                    onChange={(e) => setNewCourier({...newCourier, profile: {...newCourier.profile, experience: parseInt(e.target.value)}})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    {experienceOptions.map((year) => (
                      <option key={year} value={year}>
                        {year} il
                      </option>
                    ))}
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Status</label>
                  <select
                    value={newCourier.status}
                    onChange={(e) => setNewCourier({...newCourier, status: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="active">Aktiv</option>
                    <option value="deactive">Deaktiv</option>
                    <option value="passiv">Passiv</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Təyin Edilmiş Zonalar</label>
                  <div className="max-h-32 overflow-y-auto border border-gray-300 rounded-lg p-2">
                    {newCourier.city_id ? (
                      zones.filter(zone => zone.city_id?.toString() === newCourier.city_id).map((zone) => (
                        <label key={zone.id} className="flex items-center space-x-2 py-1">
                          <input
                            type="checkbox"
                            checked={newCourier.zone_ids.includes(zone.id)}
                            onChange={(e) => {
                              if (e.target.checked) {
                                setNewCourier({
                                  ...newCourier,
                                  zone_ids: [...newCourier.zone_ids, zone.id]
                                });
                              } else {
                                setNewCourier({
                                  ...newCourier,
                                  zone_ids: newCourier.zone_ids.filter(id => id !== zone.id)
                                });
                              }
                            }}
                            className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                          />
                          <span className="text-sm text-gray-700">
                            {zone.name} ({zone.district}) - {zone.deliveryTime}
                          </span>
                        </label>
                      ))
                    ) : (
                      <div className="text-sm text-gray-500 py-2 text-center">
                        Zona seçmək üçün əvvəlcə şəhər seçin
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
            
            <div className="flex space-x-3 p-6 border-t border-gray-200">
              <button
                onClick={() => setShowEditModal(false)}
                className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Ləğv Et
              </button>
              <button
                onClick={handleEditCourier}
                disabled={!newCourier.first_name || !newCourier.last_name || !newCourier.phone || !newCourier.email || !newCourier.password || !newCourier.city_id}
                className="flex-1 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Yenilə
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Delete Courier Modal */}
      {showDeleteModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-2xl p-6 w-full max-w-md">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-xl font-semibold text-gray-800">Kuryeri Sil</h3>
              <button 
                onClick={() => setShowDeleteModal(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <X className="w-6 h-6" />
              </button>
            </div>
            
            <div className="text-center mb-6">
              <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <Trash2 className="w-8 h-8 text-red-600" />
              </div>
              <h4 className="text-lg font-medium text-gray-800 mb-2">Kuryeri silmək istədiyinizə əminsiniz?</h4>
              <p className="text-gray-600">
                <strong>{selectedCourier?.name}</strong>
              </p>
              <p className="text-sm text-gray-500 mt-2">
                Bu əməliyyat geri alına bilməz.
              </p>
            </div>
            
            <div className="flex space-x-3">
              <button
                onClick={() => setShowDeleteModal(false)}
                className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Ləğv Et
              </button>
              <button
                onClick={handleDeleteCourier}
                className="flex-1 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
              >
                Sil
              </button>
            </div>
          </div>
        </div>
      )}

      {/* View Courier Modal */}
      {showViewModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-2xl w-full max-w-4xl max-h-[90vh] flex flex-col">
            <div className="flex items-center justify-between p-6 border-b border-gray-200">
              <h3 className="text-xl font-semibold text-gray-800">Kuryer Detalları</h3>
              <button 
                onClick={() => setShowViewModal(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <X className="w-6 h-6" />
              </button>
            </div>
            
            <div className="flex-1 overflow-y-auto p-6">
              {selectedCourier && (
                <div className="space-y-6">
                  {/* Courier Header */}
                  <div className="bg-gradient-to-r from-blue-50 to-purple-100 p-6 rounded-xl">
                    <div className="flex items-center space-x-6">
                      <div className="w-20 h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white text-2xl font-bold">
                        {selectedCourier.first_name?.charAt(0) || '?'}
                      </div>
                      <div className="flex-1">
                        <h4 className="text-2xl font-semibold text-gray-800 mb-2">{selectedCourier.first_name} {selectedCourier.last_name}</h4>
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                          <div>
                            <p className="text-gray-600">Status</p>
                            <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(selectedCourier.status)}`}>
                              {selectedCourier.status}
                            </span>
                          </div>
                          <div>
                            <p className="text-gray-600">Bölgə</p>
                            <p className="font-medium text-gray-800">{selectedCourier.city?.name || 'Naməlum'}</p>
                          </div>
                          <div>
                            <p className="text-gray-600">Nəqliyyat</p>
                            <p className="font-medium text-gray-800">{selectedCourier.profile?.vehicle_type || 'Naməlum'}</p>
                          </div>
                          <div>
                            <p className="text-gray-600">Təcrübə</p>
                            <p className="font-medium text-gray-800">{selectedCourier.profile?.experience || 0} il</p>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Contact Information */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="bg-gray-50 p-4 rounded-xl">
                      <h5 className="font-medium text-gray-800 mb-3 flex items-center">
                        <Phone className="w-5 h-5 mr-2 text-blue-600" />
                        Əlaqə Məlumatları
                      </h5>
                      <div className="space-y-2">
                        <div className="flex items-center space-x-2">
                          <Phone className="w-4 h-4 text-gray-500" />
                          <span className="text-sm text-gray-700">{selectedCourier.phone}</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <Mail className="w-4 h-4 text-gray-500" />
                          <span className="text-sm text-gray-700">{selectedCourier.email}</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <MapPin className="w-4 h-4 text-gray-500" />
                          <span className="text-sm text-gray-700">{selectedCourier.city?.name || 'Naməlum'}</span>
                        </div>
                      </div>
                    </div>
                    
                    <div className="bg-gray-50 p-4 rounded-xl">
                      <h5 className="font-medium text-gray-800 mb-3 flex items-center">
                        <Truck className="w-5 h-5 mr-2 text-green-600" />
                        Nəqliyyat Məlumatları
                      </h5>
                      <div className="space-y-2">
                        <div className="flex items-center space-x-2">
                          <Truck className="w-4 h-4 text-gray-500" />
                          <span className="text-sm text-gray-700">{selectedCourier.profile?.vehicle_type || 'Naməlum'}</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <span className="text-sm text-gray-700">Nömrə: {selectedCourier.profile?.plate_number || 'Təyin edilməyib'}</span>
                        </div>
                        <div className="flex items-center space-x-2">
                          <span className="text-sm text-gray-700">Təcrübə: {selectedCourier.profile?.experience || 0} il</span>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Performance Statistics */}
                  <div className="bg-gray-50 p-4 rounded-xl">
                    <h5 className="font-medium text-gray-800 mb-3 flex items-center">
                      <TrendingUp className="w-5 h-5 mr-2 text-purple-600" />
                      Performans Statistikası
                    </h5>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                      <div className="text-center">
                        <p className="text-2xl font-bold text-blue-600">{selectedCourier.courier_orders?.length || 0}</p>
                        <p className="text-sm text-gray-600">Ümumi Sifariş</p>
                      </div>
                      <div className="text-center">
                        <p className="text-2xl font-bold text-green-600">{selectedCourier.courier_orders?.filter(order => order.status === 'completed').length || 0}</p>
                        <p className="text-sm text-gray-600">Tamamlanmış</p>
                      </div>
                      <div className="text-center">
                        <p className="text-2xl font-bold text-yellow-600">{selectedCourier.profile?.delays || 0}</p>
                        <p className="text-sm text-gray-600">Gecikmə</p>
                      </div>
                      <div className="text-center">
                        <p className="text-2xl font-bold text-purple-600">{selectedCourier.profile?.rating || 0}</p>
                        <p className="text-sm text-gray-600">Reyting</p>
                      </div>
                    </div>
                  </div>

                  {/* Assigned Zones */}
                  <div className="bg-gray-50 p-4 rounded-xl">
                    <h5 className="font-medium text-gray-800 mb-3 flex items-center">
                      <MapPin className="w-5 h-5 mr-2 text-blue-600" />
                      Təyin Edilmiş Zonalar
                    </h5>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                      {getAssignedZonesForCourier(selectedCourier).map((zone) => (
                        <div key={zone.id} className="bg-white p-3 rounded-lg border border-gray-200">
                          <div className="flex items-center justify-between">
                            <div>
                              <h6 className="font-medium text-gray-800">{zone.name}</h6>
                              <p className="text-sm text-gray-600">{zone.city?.name || 'Naməlum'}</p>
                            </div>
                            <div className="text-right">
                              <p className="text-sm font-medium text-blue-600">{zone.avg_delivery_time || '0'} saat</p>
                              <p className="text-xs text-gray-500">{zone.courier_count || 0} kuryer</p>
                            </div>
                          </div>
                        </div>
                      ))}
                      {getAssignedZonesForCourier(selectedCourier).length === 0 && (
                        <div className="col-span-full text-center py-4">
                          <p className="text-gray-500">Hazırda heç bir zona təyin edilməyib</p>
                        </div>
                      )}
                    </div>
                  </div>

                  {/* Orders Section */}
                  <div className="bg-gray-50 p-4 rounded-xl">
                    <h5 className="font-medium text-gray-800 mb-4 flex items-center">
                      <Package className="w-5 h-5 mr-2 text-orange-600" />
                      Sifariş Tarixçəsi
                    </h5>
                    
                    {/* Order Status Tabs */}
                    <div className="flex space-x-2 mb-4">
                      <button className="px-4 py-2 bg-blue-600 text-white rounded-lg text-sm font-medium">
                        Bütün Sifarişlər ({selectedCourier?.courier_orders?.length || 0})
                      </button>
                      <button className="px-4 py-2 bg-green-600 text-white rounded-lg text-sm font-medium">
                        Tamamlanmış ({selectedCourier?.courier_orders?.filter(order => order.status === 'completed').length || 0})
                      </button>
                      <button className="px-4 py-2 bg-blue-500 text-white rounded-lg text-sm font-medium">
                        Aktiv (0)
                      </button>
                      <button className="px-4 py-2 bg-yellow-500 text-white rounded-lg text-sm font-medium">
                        Gözləmədə (0)
                      </button>
                    </div>

                    {/* Orders Table */}
                    <div className="overflow-x-auto">
                      <table className="w-full">
                        <thead className="bg-white">
                          <tr>
                            <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Sifariş No</th>
                            <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Müştəri</th>
                            <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Məbləğ</th>
                            <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                            <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Tarix</th>
                            <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Çatdırılma Növü</th>
                          </tr>
                        </thead>
                        <tbody className="bg-white divide-y divide-gray-200">
                          {selectedCourier?.courier_orders?.length > 0 ? (
                            selectedCourier.courier_orders.map((order) => (
                            <tr key={order.id} className="hover:bg-gray-50">
                                <td className="px-4 py-3 text-sm font-medium text-gray-900">#{order.id}</td>
                                <td className="px-4 py-3 text-sm text-gray-700">Müştəri #{order.customer_id}</td>
                                <td className="px-4 py-3 text-sm text-gray-700">{order.total_order_price} AZN</td>
                              <td className="px-4 py-3">
                                  <span className={`px-2 py-1 text-xs font-medium rounded-full ${
                                    order.status === 'completed' ? 'bg-green-100 text-green-800' :
                                    order.status === 'new' ? 'bg-blue-100 text-blue-800' :
                                    'bg-yellow-100 text-yellow-800'
                                  }`}>
                                    {order.status === 'completed' ? 'Tamamlandı' :
                                     order.status === 'new' ? 'Yeni' : order.status}
                                </span>
                              </td>
                              <td className="px-4 py-3 text-sm text-gray-700">
                                  {new Date(order.created_at).toLocaleDateString('az-AZ')}
                                </td>
                                <td className="px-4 py-3 text-sm text-gray-700">
                                  {order.delivery_type === 'courier' ? 'Kuryer' : order.delivery_type}
                              </td>
                            </tr>
                            ))
                          ) : (
                            <tr>
                              <td colSpan="6" className="px-4 py-8 text-center text-gray-500">
                                Sifariş məlumatları mövcud deyil
                              </td>
                            </tr>
                          )}
                        </tbody>
                      </table>
                    </div>
                  </div>
                </div>
              )}
            </div>
            
            <div className="flex space-x-3 p-6 border-t border-gray-200">
              <button
                onClick={() => setShowViewModal(false)}
                className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Bağla
              </button>
              <button
                onClick={() => {
                  setShowViewModal(false);
                  openEditModal(selectedCourier);
                }}
                className="flex-1 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
              >
                Redaktə Et
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Delivery Report Modal */}
      {showDeliveryReportModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-2xl w-full max-w-6xl max-h-[90vh] flex flex-col">
            <div className="flex items-center justify-between p-6 border-b border-gray-200">
              <h3 className="text-xl font-semibold text-gray-800">Çatdırılma Hesabatı - {selectedCourier?.name}</h3>
              <button 
                onClick={() => setShowDeliveryReportModal(false)}
                className="text-gray-400 hover:text-gray-600 transition-colors"
              >
                <X className="w-6 h-6" />
              </button>
            </div>
            
            <div className="flex-1 overflow-y-auto p-6">
              {selectedCourier && (() => {
                const reportData = getDeliveryReportData(selectedCourier);
                return (
                  <div className="space-y-6">
                    {/* Summary Statistics */}
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                      <div className="bg-blue-50 p-4 rounded-xl border border-blue-200">
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="text-sm text-blue-600 font-medium">Ümumi Sifariş</p>
                            <p className="text-2xl font-bold text-blue-800">{reportData.totalOrders}</p>
                          </div>
                          <Package className="w-8 h-8 text-blue-600" />
                        </div>
                      </div>
                      
                      <div className="bg-green-50 p-4 rounded-xl border border-green-200">
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="text-sm text-green-600 font-medium">Tamamlanmış</p>
                            <p className="text-2xl font-bold text-green-800">{reportData.completedOrders}</p>
                          </div>
                          <CheckCircle className="w-8 h-8 text-green-600" />
                        </div>
                      </div>
                      
                      <div className="bg-yellow-50 p-4 rounded-xl border border-yellow-200">
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="text-sm text-yellow-600 font-medium">Orta Vaxt</p>
                            <p className={`text-2xl font-bold ${getDeliveryTimeColor(reportData.averageDeliveryTime)}`}>
                              {reportData.averageDeliveryTime} saat
                            </p>
                          </div>
                          <Clock className="w-8 h-8 text-yellow-600" />
                        </div>
                      </div>
                      
                      <div className="bg-purple-50 p-4 rounded-xl border border-purple-200">
                        <div className="flex items-center justify-between">
                          <div>
                            <p className="text-sm text-purple-600 font-medium">Uğur Faizi</p>
                            <p className="text-2xl font-bold text-purple-800">{reportData.successRate}%</p>
                          </div>
                          <TrendingUp className="w-8 h-8 text-purple-600" />
                        </div>
                      </div>
                    </div>

                    {/* Detailed Statistics */}
                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                      {/* Order Status Breakdown */}
                      <div className="bg-gray-50 p-4 rounded-xl">
                        <h5 className="font-medium text-gray-800 mb-4 flex items-center">
                          <BarChart3 className="w-5 h-5 mr-2 text-blue-600" />
                          Sifariş Statusları
                        </h5>
                        <div className="space-y-3">
                          <div className="flex items-center justify-between">
                            <span className="text-sm text-gray-600">Tamamlanmış</span>
                            <div className="flex items-center space-x-2">
                              <div className="w-24 bg-gray-200 rounded-full h-2">
                                <div 
                                  className="bg-green-500 h-2 rounded-full" 
                                  style={{width: `${(reportData.completedOrders / reportData.totalOrders) * 100}%`}}
                                ></div>
                              </div>
                              <span className="text-sm font-medium text-gray-800">{reportData.completedOrders}</span>
                            </div>
                          </div>
                          
                          <div className="flex items-center justify-between">
                            <span className="text-sm text-gray-600">Aktiv</span>
                            <div className="flex items-center space-x-2">
                              <div className="w-24 bg-gray-200 rounded-full h-2">
                                <div 
                                  className="bg-blue-500 h-2 rounded-full" 
                                  style={{width: `${(reportData.activeOrders / reportData.totalOrders) * 100}%`}}
                                ></div>
                              </div>
                              <span className="text-sm font-medium text-gray-800">{reportData.activeOrders}</span>
                            </div>
                          </div>
                          
                          <div className="flex items-center justify-between">
                            <span className="text-sm text-gray-600">Gözləmədə</span>
                            <div className="flex items-center space-x-2">
                              <div className="w-24 bg-gray-200 rounded-full h-2">
                                <div 
                                  className="bg-yellow-500 h-2 rounded-full" 
                                  style={{width: `${(reportData.pendingOrders / reportData.totalOrders) * 100}%`}}
                                ></div>
                              </div>
                              <span className="text-sm font-medium text-gray-800">{reportData.pendingOrders}</span>
                            </div>
                          </div>
                          
                          <div className="flex items-center justify-between">
                            <span className="text-sm text-gray-600">Ləğv</span>
                            <div className="flex items-center space-x-2">
                              <div className="w-24 bg-gray-200 rounded-full h-2">
                                <div 
                                  className="bg-red-500 h-2 rounded-full" 
                                  style={{width: `${(reportData.cancelledOrders / reportData.totalOrders) * 100}%`}}
                                ></div>
                              </div>
                              <span className="text-sm font-medium text-gray-800">{reportData.cancelledOrders}</span>
                            </div>
                          </div>
                        </div>
                      </div>

                      {/* Zone Performance */}
                      <div className="bg-gray-50 p-4 rounded-xl">
                        <h5 className="font-medium text-gray-800 mb-4 flex items-center">
                          <MapPin className="w-5 h-5 mr-2 text-green-600" />
                          Zona Performansı
                        </h5>
                        <div className="space-y-3">
                          {Object.entries(reportData.zoneStats).map(([zone, count]) => (
                            <div key={zone} className="flex items-center justify-between">
                              <span className="text-sm text-gray-600">{zone}</span>
                              <div className="flex items-center space-x-2">
                                <div className="w-24 bg-gray-200 rounded-full h-2">
                                  <div 
                                    className="bg-green-500 h-2 rounded-full" 
                                    style={{width: `${(count / reportData.totalOrders) * 100}%`}}
                                  ></div>
                                </div>
                                <span className="text-sm font-medium text-gray-800">{count}</span>
                              </div>
                            </div>
                          ))}
                          {Object.keys(reportData.zoneStats).length === 0 && (
                            <p className="text-sm text-gray-500 text-center py-2">Zona məlumatı yoxdur</p>
                          )}
                        </div>
                      </div>
                    </div>

                    {/* Recent Orders */}
                    <div className="bg-gray-50 p-4 rounded-xl">
                      <h5 className="font-medium text-gray-800 mb-4 flex items-center">
                        <Clock className="w-5 h-5 mr-2 text-orange-600" />
                        Son Sifarişlər
                      </h5>
                      <div className="overflow-x-auto">
                        <table className="w-full">
                          <thead className="bg-white">
                            <tr>
                              <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Sifariş No</th>
                              <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Müştəri</th>
                              <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                              <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Tarix</th>
                              <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Çatdırılma Vaxtı</th>
                              <th className="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase">Reyting</th>
                            </tr>
                          </thead>
                          <tbody className="bg-white divide-y divide-gray-200">
                            {reportData.recentOrders.map((order) => (
                              <tr key={order.id} className="hover:bg-gray-50">
                                <td className="px-4 py-3 text-sm font-medium text-gray-900">{order.orderNumber}</td>
                                <td className="px-4 py-3 text-sm text-gray-700">{order.customer}</td>
                                <td className="px-4 py-3">
                                  <span className={`px-2 py-1 text-xs font-medium rounded-full ${getOrderStatusColor(order.status)}`}>
                                    {order.status}
                                  </span>
                                </td>
                                <td className="px-4 py-3 text-sm text-gray-700">{order.date}</td>
                                <td className="px-4 py-3 text-sm text-gray-700">{order.deliveryTime || '-'}</td>
                                <td className="px-4 py-3 text-sm text-gray-700">
                                  {order.rating ? (
                                    <div className="flex items-center">
                                      <Star className="w-4 h-4 text-yellow-500 fill-current" />
                                      <span className="ml-1">{order.rating}</span>
                                    </div>
                                  ) : '-'}
                                </td>
                              </tr>
                            ))}
                            {reportData.recentOrders.length === 0 && (
                              <tr>
                                <td colSpan="6" className="px-4 py-3 text-sm text-gray-500 text-center">
                                  Sifariş məlumatı yoxdur
                                </td>
                              </tr>
                            )}
                          </tbody>
                        </table>
                      </div>
                    </div>
                  </div>
                );
              })()}
            </div>
            
            <div className="flex space-x-3 p-6 border-t border-gray-200">
              <button
                onClick={() => setShowDeliveryReportModal(false)}
                className="flex-1 px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
              >
                Bağla
              </button>
              <button
                onClick={() => {
                  setShowDeliveryReportModal(false);
                  openViewModal(selectedCourier);
                }}
                className="flex-1 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                Detallı Bax
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Toast Notification */}
      {showToast && (
        <div className="fixed top-4 right-4 z-[9999]">
          <div
            className={`flex items-center space-x-3 px-6 py-4 rounded-lg shadow-lg border-l-4 ${
              toastType === "success"
                ? "bg-green-50 text-green-800 border-green-400"
                : "bg-red-50 text-red-800 border-red-400"
            }`}
          >
            {toastType === "success" ? (
              <CheckCircle className="w-5 h-5 text-green-600" />
            ) : (
              <AlertTriangle className="w-5 h-5 text-red-600" />
            )}
            <span>{toastMessage}</span>
          </div>
        </div>
      )}
    </div>
  );
};

export default Couriers; 